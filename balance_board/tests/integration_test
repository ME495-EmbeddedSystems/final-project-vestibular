#!/usr/bin/env python
import unittest
import balance_board
import rospy
from balance_board.srv import Gains, Trajectory
from board_pid import BoardPid


class BalanceServTests(unittest.TestCase):

    def test_callSetGains(self):
        rospy.wait_for_service('set_gains', timeout=None)
        set_gains = rospy.ServiceProxy("set_gains", Gains)
        ec = set_gains(kp=0.001, ki= 0, kd=0.001)
        self.assertEquals(ec, 0)


    # def test_callNew_Traj_same_len(self):
    #     rospy.wait_for_service('new_trajectory', timeout=None)
    #     self.step = rospy.ServiceProxy("new_trajectory", Trajectory)
    #     step_input = StepRequest()
    #     step_input.x = -1
    #     step_input.y = 0.2
    #     step_input.z = -0.1
    #     step_input.grip_state = "Closed"
    #     ec = self.step(step_input)
    #     self.assertEquals(ec, -1)

    # def test_callNew_Traj_diff_len(self):
    #     rospy.wait_for_service("new_trajectory", timeout=None)
    #     self.step = rospy.ServiceProxy("new_trajectory", Trajectory)
    #     step_input_succ = StepRequest()
    #     step_input_succ.x = 0.2
    #     step_input_succ.y = 0.2
    #     step_input_succ.z = 0.2
    #     step_input_succ.grip_state = "Open"
    #     ec = self.step(step_input_succ)
    #     self.assertEquals(ec, 1)


if __name__== "__main__":
    import rostest

    rospy.init_node("integration_test")
    rostest.rosrun(balance_board, 'balance_serv_tests', BalanceServTests)
