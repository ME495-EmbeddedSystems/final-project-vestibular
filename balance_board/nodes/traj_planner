#!/usr/bin/env python3
'''
A star algorithm - Implements an A star algorithm through a matrix

Referenced - https://github.com/BaijayantaRoy/Medium-Article/blob/master/A_Star.ipynb


PUBLISHERS:
  + 
SUBSCRIBERS
  +  
SERVICES:
  +
PARAMETERS
  + Maze
'''

import numpy as np
import rospy
from planner import Astar
from std_srvs.srv import Empty, EmptyResponse

class Plan():

    def __init__(self):

      # self.maze = rospy.get_param("maze")
      # self.start = rospy.get_param("start")
      # self.end = rospy.get_param("end")
      
      self.maze = [[0, 1, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0],
                  [0, 1, 0, 1, 0, 0],
                  [0, 1, 0, 0, 1, 0],
                  [0, 0, 0, 0, 1, 0]]
      self.start = [0, 0]
      self.end = [4,5]
      self.cost = 1
      self.plan_path = rospy.Service("plan_path",Empty,self.plan_path_callback)

    def plan_path_callback(self,msg):

      self.astar = Astar(self.maze,self.start, self.end,self.cost)
      self.path = self.astar.main()
      print(self.path)

      return EmptyResponse()




if __name__=='__main__': 

    rospy.init_node('plan')
    Plan()
    rospy.spin()