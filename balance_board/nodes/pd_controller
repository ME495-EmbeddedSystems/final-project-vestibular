#!/usr/bin/env python3
'''
use control theta to control xddot, to get the desired velocity (both in acceleration zone constant zone and deceleration zone)

PUBLISHERS:
  + 
SUBSCRIBERS
  +  
SERVICES:
  none
PARAMETERS
  + none
'''
#imports
import rospy
from balance_board.msg import BoardPose,Ball_pose, PlotPoint, RobotState
from balance_board.srv import Gains
from board_pid import BoardPid
import time
# import geometry_msgs.msg

class PD:
    def __init__(self):
        '''
        The initiation function of the flip. Initiates subscribers and variables
        INPUTS:
            none
        OUTPUTS:
            none
        '''

        self.queue = []
        self.repeat = False
        self.pos_tol = 5

        # inits publishers, subscribers services
        self.angle_pub = rospy.Publisher('angle_updates', BoardPose, queue_size=10)
        self.vision_system = rospy.Subscriber("/ball_pose", Ball_pose, self.vision_callback)
        self.target = rospy.Subscriber('target', Ball_pose, self.target_callback)
        self.plotter = rospy.Publisher('plot_log', PlotPoint, queue_size=10)
        self.set_gains = rospy.Service('set_gains', Gains, self.set_gains_callback)
        self.ramp_gains = rospy.Service('ramp_gains', Gains, self.ramp_gains_callback)
        self.rci_state = rospy.Subscriber('rci_state', RobotState, self.rci_state_callback)

        self.pos_kp = 0.001
        self.pos_ki = 0
        self.pos_kd = 0.0001
        self.frames_smoothing = 1

        self.x_pid = BoardPid(
            kp=self.pos_kp,
            ki=self.pos_ki,
            kd=self.pos_kd,
            derivative_window = self.frames_smoothing,
            target=352
        )

        self.y_pid = BoardPid(
            kp=self.pos_kp,
            ki=self.pos_ki,
            kd=self.pos_kd,
            derivative_window = self.frames_smoothing,
            target=223
        )

    def vision_callback(self, msg):
        
        # inits new board pose message
        pose = BoardPose()

        # gets new angle values for the board from PID objects
        pose.theta_x = self.x_pid.get(msg.x)
        pose.theta_y = -self.y_pid.get(msg.y)

        # publishes new joint angles to the jci
        self.angle_pub.publish(pose)  
    
    def set_gains_callback(self, msg):
        self.x_pid.set_gains(kp=msg.kp, ki= msg.ki, kd=msg.kd)
        self.y_pid.set_gains(kp=msg.kp, ki= msg.ki, kd=msg.kd)
        return 0

    def ramp_gains_callback(self, msg):
        kp_inc = (msg.kp - self.x_pid.kp)/500
        ki_inc = (msg.ki - self.x_pid.ki)/500
        kd_inc = (msg.kd - self.x_pid.kd)/500

        for i in range(500):
            self.x_pid.set_gains(
                kp=self.x_pid.kp+kp_inc,
                ki=self.x_pid.ki+ki_inc,
                kd=self.x_pid.kd+kd_inc
            )
            self.y_pid.set_gains(
                kp=self.y_pid.kp+kp_inc,
                ki=self.y_pid.ki+ki_inc,
                kd=self.y_pid.kd+kd_inc
            )
            time.sleep(0.01)

    def target_callback(self, msg):
        self.x_pid.set_target(msg.x_way)
        self.y_pid.set_target(msg.y_way)

    def rci_state_callback(self, msg):
        if not msg.state:
            self.x_pid.int = 0
            self.y_pid.int = 0

def main():
    
    rospy.init_node('pd_controller', anonymous=True)
    controller = PD()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass