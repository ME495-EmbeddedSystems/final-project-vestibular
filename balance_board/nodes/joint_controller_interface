#!/usr/bin/env python3

import rospy
import moveit_commander
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from math import pi

class JointControllerInterface:
     
    def __init__(self):
        self.max_increment = rospy.get_param("max_angle_increment")
        self.pub_freq = rospy.get_param("joint_update_frequency")

        self.angle_subscriber = rospy.Subscriber("angle_updates", JointTrajectory, self.angle_subscriber_callback)
        self.joint_timer = rospy.Timer(rospy.Duration(1/self.pub_freq), self.joint_timer_callback)
        self.fr_pub = rospy.Publisher("position_joint_trajectory_controller/command",JointTrajectory,queue_size = 1)

        self.theta_x = 0
        self.theta_y = 0


    def angle_subscriber_callback(self, message):
        self.theta = message.points.positions
        print(self.theta)
        self.theta_x = self.theta[6]
        self.theta_y = self.theta[7]

    def joint_timer_callback(self, message):
        new_js = JointTrajectory()
        new_js.joint_names = ['panda_joint1','panda_joint2','panda_joint3','panda_joint4', 'panda_joint5', 'panda_joint6','panda_joint7']
        
        js_point = JointTrajectoryPoint()
        js_point.positions = [0,-pi/2, pi/2, -pi/2, -pi/2+self.theta_x, pi/2+self.theta_y, pi/4]
        js_point.time_from_start.nsecs = 10000000
        new_js.points = [js_point]
        
        self.fr_pub.publish(new_js)

if __name__=='__main__': # main run for node. inits node, runs class, and spins
    '''
    Your quintessential main function to run the class and init the node
    INPUTS:
        none
    OUTPUTS:
        Empty
    '''
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('joint_controller_interface')
    myJointControllerInterface = JointControllerInterface()
    rospy.spin()