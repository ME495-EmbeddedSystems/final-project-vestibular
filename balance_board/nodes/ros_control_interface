#!/usr/bin/env python3
"""
intermediate between nodes and position_joint_trajectory_controller/command
in order to only publish new values when messages are sent to "angle_updates" -  because the publisher switches upon meeting acceleration limit

"""

import rospy
import moveit_commander
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from math import pi
from std_srvs.srv import Empty, EmptyResponse
from std_msgs.msg import Float64MultiArray
from sensor_msgs.msg import JointState
from balance_board.msg import BoardPose
from balance_board.msg import PlotPoint
from balance_board.msg import RobotState
from board_pid import BoardPid
from controller_manager_msgs.srv import SwitchController, SwitchControllerRequest
import copy
import sys

class JointControllerInterface:
     
    def __init__(self):

        # inits robot state (enabled/disabled) as disabled
        self.state = False


        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()
        self.move_group = moveit_commander.MoveGroupCommander("panda_arm")

        # inits robot home position
        self.joint_home = {'panda_joint1':0,'panda_joint2': -pi/2,'panda_joint3':pi/2,'panda_joint4': -pi/2, 'panda_joint5':-pi/2, 'panda_joint6':pi/2,'panda_joint7': pi/4}
        self.pos_home = [0, -pi/2, pi/2, -pi/2, -pi/2, pi/2, pi/4]
        self.pos_command = Float64MultiArray()

        # reads in parameters
        self.max_increment = rospy.get_param("~max_angle_increment")
        self.pub_freq = rospy.get_param("~joint_update_frequency")

        # inits subscribers/timers

        # angle commands from high level controller
        self.rci_state = rospy.Publisher("rci_state", RobotState, queue_size=10)
        self.angle_subscriber = rospy.Subscriber("angle_updates", BoardPose, self.angle_subscriber_callback)
        self.cur_angle_pub = rospy.Publisher('cur_angles', BoardPose, queue_size=10)
        self.cur_vel_puv = rospy.Publisher('cur_vels', BoardPose, queue_size=10)
        # main robot update timer
        self.joint_timer = rospy.Timer(rospy.Duration(1/self.pub_freq), self.joint_timer_callback)
        # trajectory command topic
        self.traj_pub = rospy.Publisher("position_joint_trajectory_controller/command",JointTrajectory,queue_size = 1)
        # position control command topic
        self.pos_pub = rospy.Publisher("pos_control/command", Float64MultiArray, queue_size=10)
        # plotting topic
        self.plotter = rospy.Publisher("plot_log", PlotPoint, queue_size=10)
        

        # inits disired angles to home position
        self.theta_x = 0
        self.theta_y = 0

        self.cur_theta_x = 0
        self.cur_theta_y = 0
        self.cur_vel_x = 0
        self.cur_vel_y = 0
        self.max_vel = 10

        # inits services
        self.enable = rospy.Service("start", Empty, self.enable_callback)
        self.disable = rospy.Service("stop", Empty, self.disable_callback)
        self.home = rospy.Service("home", Empty, self.home_callback)
        self.rci_state = rospy.Publisher("rci_state", RobotState, queue_size=10)
        self.translate = rospy.Subscriber('joint_states', JointState, self.translator_callback)

        rospy.wait_for_service("controller_manager/switch_controller")
        self.switch = rospy.ServiceProxy("controller_manager/switch_controller", SwitchController)

        self.pos_to_traj = SwitchControllerRequest()
        self.pos_to_traj.stop_controllers = ['pos_control']
        self.pos_to_traj.start_controllers = ['position_joint_trajectory_controller']
        self.pos_to_traj.strictness = 2
        self.pos_to_traj.start_asap = False
        self.pos_to_traj.timeout = 0.0 

        self.traj_to_pos = SwitchControllerRequest()
        self.traj_to_pos.start_controllers = ['pos_control']
        self.traj_to_pos.stop_controllers = ['position_joint_trajectory_controller']
        self.traj_to_pos.strictness = 2
        self.traj_to_pos.start_asap = False
        self.traj_to_pos.timeout = 0.0 


    def angle_subscriber_callback(self, message):
        # sets new desired angles from high level controller
        self.theta_x = max(-pi/4, min(pi/4, message.theta_x))
        self.theta_y = max(-pi/4, min(pi/4, message.theta_y))

    def translator_callback(self, message):
        new_pose = BoardPose()
        new_vel = BoardPose()
        new_pose.theta_x = message.position[4] + pi/2
        new_pose.theta_y = message.position[5] - pi/2
        self.cur_theta_x = new_pose.theta_x
        self.cur_theta_y = new_pose.theta_y
        new_vel.theta_x = message.velocity[4]
        new_vel.theta_y = message.velocity[5]
        self.cur_vel_x = new_vel.theta_x
        self.cur_vel_y = new_vel.theta_y
        self.cur_angle_pub.publish(new_pose)
        self.cur_vel_puv.publish(new_vel)

    def joint_timer_callback(self, message):

        # exits if robot is disabled wihthout sending new position target
        self.rci_state.publish(self.state)

        if not self.state:
            return

        data = copy.copy(self.pos_home)
        
        data[4] = data[4] + self.theta_x
        data[5] = data[5] + self.theta_y
        self.pos_command.data = data
        
        self.pos_pub.publish(self.pos_command)

    # sends robot to home position
    def home_callback(self, message):
        self.switch.call(self.pos_to_traj)
        self.state = False
        mg = self.move_group

        joint_val = mg.get_current_joint_values()
        print(f"Joint values before {joint_val}")

        mg.set_joint_value_target(self.joint_home)
        mg.go(wait='true')

        joint_val = mg.get_current_joint_values()
        print(f"Current joint values {joint_val}")

        return EmptyResponse()

    # enables robot (sets state to True)
    def enable_callback(self, message):
        self.state = True
        self.switch.call(self.traj_to_pos)
        return EmptyResponse()

    # disables robot (sets state to False)
    def disable_callback(self, message):
        self.state = False
        self.switch.call(self.pos_to_traj)
        return EmptyResponse()

if __name__=='__main__': # main run for node. inits node, runs class, and spins
    '''
    Your quintessential main function to run the class and init the node
    INPUTS:
        none
    OUTPUTS:
        Empty
    '''
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('joint_controller_interface')
    myJointControllerInterface = JointControllerInterface()
    rospy.spin()