#!/usr/bin/env python3

'''
Apriltag detection and transforms in camera frame

PUBLISHERS:
  + 
Listeners:
  +  tf
SERVICES:
  +
PARAMETERS
  + 
'''

import rospy
import tf 
import geometry_msgs.msg


class april_tag:

    def __init__(self):

        # initialize listener
        listener = tf.TransformListener()

        while not rospy.is_shutdown():
            try:
                # get translation and rotation (as quaternion) in camera frame
                (trans,rot) = listener.lookupTransform("camera_color_optical_frame","tag_0",rospy.Time())
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                continue

            rospy.logerr(trans)
            
            rospy.logerr(rot)




def main():
    rospy.init_node('april_tag')
    tag = april_tag()
    

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 


        