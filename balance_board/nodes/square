#!/usr/bin/env python3
'''
use control theta to control xddot, to get the desired velocity (both in acceleration zone constant zone and deceleration zone)

PUBLISHERS:
  + 
SUBSCRIBERS
  +  
SERVICES:
  none
PARAMETERS
  + none
'''
#imports
import rospy
from balance_board.msg import BoardPose,Ball_pose, PlotPoint
from balance_board.srv import Gains
from board_pid import BoardPid
# import geometry_msgs.msg

class PD:
    def __init__(self):
        '''
        The initiation function of the flip. Initiates subscribers and variables
        INPUTS:
            none
        OUTPUTS:
            none
        '''
        side_len = 100
        start_x = 375
        start_y = 300
        self.traj = [[start_x, start_y], [start_x+side_len, start_y], [start_x+side_len, start_y+side_len], [start_x, start_y+side_len]]
        # inits publishers, subscribers services
        self.targ_pub = rospy.Publisher('target', Ball_pose, queue_size=10)
        self.timer = rospy.Timer(rospy.Duration(secs=5), self.timer_callback)

        self.i = 0

    def timer_callback(self, msg):
        print("yay")
        new_pose = Ball_pose()
        new_pose.x_way = self.traj[self.i][0]
        new_pose.y_way = self.traj[self.i][1]

        self.targ_pub.publish(new_pose)
        self.i = self.i + 1

        if self.i == len(self.traj):
            self.i = 0

def main():
    
    rospy.init_node('nested_pd_controller', anonymous=True)
    controller = PD()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass