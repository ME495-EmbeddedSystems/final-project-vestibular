#!/usr/bin/env python3

'''
PUBLISHERS:
  + 
SUBSCRIBERS
  +  
SERVICES:
  none
PARAMETERS
  + none
'''

#imports
import rospy
from std_srvs.srv import Empty, EmptyResponse
from balance_board.msg import Ball_pose
from balance_board.msg import BoardPose
from balance_board.msg import PlotPoint
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from sensor_msgs.msg import JointState
import numpy as np
from scipy import signal

class TestVelocity:
    def __init__(self):
        '''
        The initiation function of the flip. Initiates subscribers and variables
        INPUTS:
            none
        OUTPUTS:
            none
        '''

        self.angle_pub = rospy.Publisher('angle_updates', BoardPose, queue_size=10)
        self.plotter = rospy.Publisher('plot_log', PlotPoint, queue_size=10)
        self.timer = rospy.Timer(rospy.Duration(1/100), self.timer_callback)

        self.joints = rospy.Subscriber("/joint_states",JointState,self.joint_callback)

        amp_x = 0.05
        amp_y = 0.1
        square_t = np.linspace(0, 2*np.pi, 300)
        self.trajectory_x = amp_x*signal.square(2 * np.pi *amp_x* square_t)
        self.trajectory_y = amp_y*signal.square(2 * np.pi *amp_y* square_t)
        
        self.index = 0
    
    def joint_callback(self,msg):
        self.joints_name = msg.name
        self.joint_pos = msg.position
        self.joint_vel = msg.velocity


    def timer_callback(self, req):
        x_point = PlotPoint()
        y_point = PlotPoint()
        pose = BoardPose()
        pose.theta_x = self.trajectory_x[self.index]
        pose.theta_y = self.trajectory_y[self.index]
        self.index += 1
        if self.index == len(self.trajectory_x):
            self.index = 0
        self.angle_pub.publish(pose)

        x_point.value = self.trajectory_x[self.index]
        y_point.value = self.trajectory_y[self.index]

        x_point.plot = "Velocity Test"
        y_point.plot = "Velocity Test"

        x_point.line = "X"
        y_point.line = "Y"

        self.plotter.publish(x_point)
        self.plotter.publish(y_point)

        # print(self.joint_vel[5],self.joint_vel[6])
          
      
def main():
    
    rospy.init_node('velocity_max_test', anonymous=True)
    velocity = TestVelocity()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass